# Build and test TriXX application
# Requires:
#  - prebuilt database image
#  - kafka-jruby image built from /docker/kafka-jruby

# Dockerfile for image git.osp-dd.de:5005/main/trixx/kafka-jruby is located in trixx/docker/kafka-jruby
image: git.osp-dd.de:5005/main/trixx/kafka-jruby:9.3.1.0-jdk17

variables:
  CI_DEBUG_SERVICES: trace
  TRIXX_KAFKA_SEED_BROKER: localhost:9092
  TEMP_DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-ci-temp
  FINAL_DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  PODMAN: podman --events-backend=file --storage-driver=vfs --cgroup-manager=cgroupfs


# Separate stages because pending jobs get stuck after one hour (hard limit)
stages:
  - code_analysis
  - test
  - pre_build
  - build
  - post_build
  - deploy

# interactive edit config/brakemen.ignore by > brakeman -A -I
# Use this to exclude findings after considering as false positives
brakeman_analysis:
  stage: code_analysis
  script:
    # racc installed in addition due to error: no such file to load -- racc/info. Please install the appropriate dependency: ruby_parser.
    - gem install --no-doc racc brakeman
    - brakeman -A

test_frontend:
  image: node:14-alpine
  stage: code_analysis
  script:
    - npm install -g @vue/cli
    - cd frontend && npm ci && npm run test:unit

.tests:
  #  services:
  #    - name: git.osp-dd.de:5005/main/trixx/kafka-compact
  #      alias: kafka
  variables:
    RAILS_ENV: "test"
  #    KAFKA_LISTENERS: LISTENER_EXT://0.0.0.0:9092,LISTENER_INT://0.0.0.0 :9093
  #    KAFKA_ADVERTISED_LISTENERS: LISTENER_EXT://kafka:9092,LISTENER_INT://localhost:9093
  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_EXT:PLAINTEXT,LISTENER_INT:PLAINTEXT
  #    KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT

  script:
    - /opt/start-kafka.sh
    - date
    - java -version
    - gem install --no-doc bundler
    - bundle config set deployment 'true'
    # due to error building digest-crc:6.0.3 sh: line 0: exec: jrake: not found
    - ln -s /opt/jruby-$JRUBY_VERSION/bin/rake /opt/jruby-$JRUBY_VERSION/bin/jrake
    - bundle install --jobs 4
    # Wait max. 10 minutes for DB available
    - bundle exec rake "ci_preparation:wait_for_db_available[10]"
    # Fix problem in oracle_enhanced-adapter with access on All_Synonyms
    - bundle exec rake ci_preparation:speedup_oracle_dictionary_calls
    - bundle exec rake ci_preparation:create_user
    - bundle exec rails db:migrate RAILS_ENV=test
    - >
      if [ "$TRIXX_DB_TYPE" == "ORACLE" ]; then
        # Check if db:rollback is functional + restore migration
        # SQLite does not support remove_foreign_key although it is implemented
        bundle exec rails db:migrate RAILS_ENV=test VERSION=0 && bundle exec rails db:migrate RAILS_ENV=test
      fi
    - bundle exec rails test
  artifacts:
    when: always
    paths:
      - log/
      - tmp/screenshots/
      - /opt/kafka/logs/*
    expire_in: 1 month


.tests_SQLITE:
  extends: .tests
  variables:
    TRIXX_DB_TYPE: "SQLITE"

.tests_ORACLE:
  extends: .tests
  variables:
    TRIXX_DB_TYPE: "ORACLE"
    TRIXX_DB_SYS_PASSWORD: "oracle"
    TEST_SERVICENAME: "ORCL"

test_sqlite:
  stage: test
  extends: .tests_SQLITE

test_oracle_12.1:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: git.osp-dd.de:5005/main/trixx/oracle/database_prebuilt:12.1.0.2-ee
      alias: oracle-db
  variables:
    TRIXX_DB_URL: "oracle-db:1521/ORCLPDB1"

test_oracle_12.2:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: git.osp-dd.de:5005/main/trixx/oracle/database_prebuilt:12.2.0.1-ee
      alias: oracle-db
  variables:
    TRIXX_DB_URL: "oracle-db:1521/ORCLPDB1"

test_oracle_19.3:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: git.osp-dd.de:5005/main/trixx/oracle/database_prebuilt:19.3.0.0-ee
      alias: oracle-db
  variables:
    TRIXX_DB_URL: "oracle-db:1521/ORCLPDB1"

test_oracle_19.10-SE2:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: git.osp-dd.de:5005/main/trixx/oracle/database_prebuilt:19.10.0.0-se2
      alias: oracle-db
  variables:
    TRIXX_DB_URL: "oracle-db:1521/ORCLPDB1"

generate_asciidoc:
  stage: pre_build
  script:
    - gem install --no-doc asciidoctor
    - asciidoctor -o doc/trixx.html doc/trixx.adoc
    - gem install --no-doc asciidoctor-pdf
    - asciidoctor-pdf -o doc/trixx.pdf doc/trixx.adoc
  artifacts:
    # artifacts are downloadable at https://git.osp-dd.de/main/trixx/-/jobs/artifacts/master/download?job=generate_asciidoc
    # direct access a'la https://git.osp-dd.de/main/trixx/-/jobs/artifacts/master/file/doc/trixx.html?job=generate_asciidoc
    paths:
      - doc/trixx.html
      - doc/images/
      - doc/trixx.pdf

build_trixx:
  stage: build

  image:
    # 2021-04-27: Image used from own registry because https://storage.googleapis.com/ is not accessible from within OCI
    # name: gcr.io/kaniko-project/executor:debug
    name: git.osp-dd.de:5005/main/trixx/kaniko-executor:debug
    entrypoint: [""]

  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - 'echo "{\"release\": \"$release_tag\", \"date\": \"$(date -I)\", \"commit\": \"$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA\"}" > build.json'
    - cat build.json
    - echo "Docker image = $TEMP_DOCKER_IMAGE"
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DI/docker/trixx/Dockerfile-trixx-alpine --destination $TEMP_DOCKER_IMAGE

trivy_scan:
  stage: post_build
  script:
    # Download and install trivy
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b .
    # Check vulnerabilities, evaluates exceptions in .trivyignore
    - ./trivy --exit-code 1 $TEMP_DOCKER_IMAGE
    - echo "TODO evaluate trivy results"

#rapid7_scan:
# # deactivated because of error if calling in podman: Failed to analyze image. java.io.IOException: Insufficient disk space to extract resource. 0 available, 9 required.
#  stage: post_build
#  variables:
#    MAXIMAL_ALLOWED_RISK_SCORE: 0
#  script:
#    - $PODMAN login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - $PODMAN pull $TEMP_DOCKER_IMAGE
#    - $PODMAN pull docker.io/rapid7/container-image-scanner
#    - $PODMAN save $TEMP_DOCKER_IMAGE -o trixx.tar
#    - $PODMAN run -it --rm -v $PWD/trixx.tar:/trixx.tar rapid7/container-image-scanner -f trixx.tar -k "$RAPID7_IMAGE_SCANNER_API_KEY" -r eu > rapid7.json
#    - cat rapid7.json | jq .assessment
#    - |
#      RISK_SCORE=`cat rapid7.json | jq .assessment.risk_score`
#      # Use bc for comparison because $RISK_SCORE can be a floating point number
#      if [ `echo "$RISK_SCORE > $MAXIMAL_ALLOWED_RISK_SCORE" | bc` -eq 1 ]; then
#        echo "risk_score $RISK_SCORE is higher than allowed maximum $MAXIMAL_ALLOWED_RISK_SCORE ! Aborting..."
#        echo ''
#        cat rapid7.json
#        exit 1
#      fi
#  artifacts:
#    when: always
#    paths:
#      - rapid7.json
#    expire_in: 1 month


.docker_test:
  script:
    - $PODMAN login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - $PODMAN pull $TEMP_DOCKER_IMAGE

    - >
      echo  "# Trixx-Config generated by CI Pipeline            " > trixx_run.yml  &&
      echo  "TRIXX_DB_TYPE:            ORACLE                   " >> trixx_run.yml &&
      echo  "TRIXX_DB_USER:            trixx                    " >> trixx_run.yml &&
      echo  "TRIXX_DB_PASSWORD:        trixx                    " >> trixx_run.yml &&
      echo  "TRIXX_DB_URL:             $TRIXX_DB_URL            " >> trixx_run.yml &&
      echo  "TRIXX_DB_SYS_PASSWORD:    oracle                   " >> trixx_run.yml &&
      echo  "TRIXX_KAFKA_SEED_BROKER:  $TRIXX_KAFKA_SEED_BROKER " >> trixx_run.yml
    - cat trixx_run.yml
    - $PODMAN run --rm -v $PWD/trixx_run.yml:/trixx_run.yml -e TRIXX_RUN_CONFIG=/trixx_run.yml $TEMP_DOCKER_IMAGE bundle exec rake "ci_preparation:wait_for_db_available[10]"
    - $PODMAN run --rm -v $PWD/trixx_run.yml:/trixx_run.yml -e TRIXX_RUN_CONFIG=/trixx_run.yml $TEMP_DOCKER_IMAGE bundle exec rake ci_preparation:speedup_oracle_dictionary_calls
    - $PODMAN run --rm -v $PWD/trixx_run.yml:/trixx_run.yml -e TRIXX_RUN_CONFIG=/trixx_run.yml $TEMP_DOCKER_IMAGE bundle exec rake ci_preparation:create_user
    - $PODMAN run -d --rm --name=trixx -p8080:8080 -v $PWD/trixx_run.yml:/trixx_run.yml -e TRIXX_RUN_CONFIG=/trixx_run.yml $TEMP_DOCKER_IMAGE
    - sleep 5
    - $PODMAN ps
    - |
      echo "
      MAX_WAIT=60
      typeset -i LOOPS=0
      echo :\$LOOPS:
      while [ \$LOOPS -lt \$MAX_WAIT ]; do
        curl http://localhost:8080/ 2>/dev/null >/dev/null
        retval=\$?
        if [ \$retval -eq 0 ]; then
          break
        fi
        LOOPS=LOOPS+1
        echo -n .
        sleep 1
      done
      if [ \$LOOPS -eq \$MAX_WAIT ]; then
        echo No access to port 8080 after \$MAX_WAIT seconds
        echo retval = \$retval
        exit 1
      else
        # Let the worker start before health check
        sleep 1
        exit 0
      fi
      " | bash
    - curl http://localhost:8080/
    - curl -L http://localhost:8080/health_check/
    - |
      echo "
      sleep 3
      curl -L http://localhost:8080/health_check/ | grep health_check_timestamp
      if [ \$? -ne 0 ]; then
        echo healthcheck not complete
        exit 1
      fi
      " | bash
    - $PODMAN stop trixx

docker_test_oracle_12.1:
  stage: post_build
  extends: .docker_test
  services:
    - name: git.osp-dd.de:5005/pramm/panorama_gem_ci/database_prebuilt:12.2.0.1-ee
      alias: oracle-db
  variables:
    TRIXX_DB_TYPE: ORACLE
    TRIXX_DB_USER: trixx
    TRIXX_DB_PASSWORD: trixx
    TRIXX_DB_URL: "oracle-db:1521/ORCLPDB1"


# Deploy the static site to GitLab Pages, but only for master branch
pages:
  stage: deploy
  only:
    refs:
      - master
  script:
    - cp doc/trixx.html public/
    - cp -r doc/images public/
    - cp doc/trixx.pdf public/
  artifacts:
    paths:
      - public/trixx.pdf
      - public/trixx.html
      - public/images/

# Make the Docker image available for user after treating as clean
final_tag_docker:
  stage: deploy
  script:
    - $PODMAN login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Ensure previously built image is available
    - $PODMAN pull $TEMP_DOCKER_IMAGE
    # make master tag available for consumer
    - $PODMAN tag $TEMP_DOCKER_IMAGE $FINAL_DOCKER_IMAGE
    - $PODMAN push $FINAL_DOCKER_IMAGE
