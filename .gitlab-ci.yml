# Build and test TriXX application
# Requires:
#  - prebuilt database image
#  - kafka-jruby image built from /docker/kafka-jruby

image: git.osp-dd.de:5005/main/trixx/kafka-jruby:cypress-test

variables:
  CI_DEBUG_SERVICES: trace
  TRIXX_KAFKA_SEED_BROKER: localhost:9092
  TEMP_DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-ci-temp
  FINAL_DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  PODMAN: podman --events-backend=file --storage-driver=vfs --cgroup-manager=cgroupfs


# Separate stages because pending jobs get stuck after one hour (hard limit)
stages:
  - code_analysis
#  - test
  - pre_build
  - build
  - post_build
  - deploy

# interactive edit config/brakemen.ignore by > brakeman -A -I
# Use this to exclude findings after considering as false positives
brakeman_analysis:
  stage: code_analysis
  script:
    # racc installed in addition due to error: no such file to load -- racc/info. Please install the appropriate dependency: ruby_parser.
    - gem install --no-doc racc brakeman
    - brakeman -A

generate_asciidoc:
  stage: pre_build
  script:
    - gem install asciidoctor
    - asciidoctor -o doc/trixx.html doc/trixx.adoc
    - gem install asciidoctor-pdf
    - asciidoctor-pdf -o doc/trixx.pdf doc/trixx.adoc
  artifacts:
    # artifacts are downloadable at https://git.osp-dd.de/main/trixx/-/jobs/artifacts/master/download?job=generate_asciidoc
    # direct access a'la https://git.osp-dd.de/main/trixx/-/jobs/artifacts/master/file/doc/trixx.html?job=generate_asciidoc
    paths:
      - doc/trixx.html
      - doc/images/
      - doc/trixx.pdf

build_trixx:
  stage: build

  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]

  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - 'echo "{\"release\": \"$release_tag\", \"date\": \"$(date -I)\", \"commit\": \"$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA\"}" > build.json'
    - cat build.json
    - echo "Docker image = $TEMP_DOCKER_IMAGE"
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DI/docker/trixx/Dockerfile-trixx-alpine --destination $TEMP_DOCKER_IMAGE

.docker_test:
  script:
    - $PODMAN login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - $PODMAN pull $TEMP_DOCKER_IMAGE

    - >
      echo  "# Trixx-Config generated by CI Pipeline            " > trixx_run.yml  &&
      echo  "TRIXX_DB_TYPE:            ORACLE                   " >> trixx_run.yml &&
      echo  "TRIXX_DB_USER:            trixx                    " >> trixx_run.yml &&
      echo  "TRIXX_DB_PASSWORD:        trixx                    " >> trixx_run.yml &&
      echo  "TRIXX_DB_URL:             $TRIXX_DB_URL            " >> trixx_run.yml &&
      echo  "TRIXX_DB_SYS_PASSWORD:    oracle                   " >> trixx_run.yml &&
      echo  "TRIXX_KAFKA_SEED_BROKER:  $TRIXX_KAFKA_SEED_BROKER " >> trixx_run.yml
    - cat trixx_run.yml
    - $PODMAN run --rm -v $PWD/trixx_run.yml:/trixx_run.yml -e TRIXX_RUN_CONFIG=/trixx_run.yml $TEMP_DOCKER_IMAGE bundle exec rake "ci_preparation:wait_for_db_available[10]"
    - $PODMAN run --rm -v $PWD/trixx_run.yml:/trixx_run.yml -e TRIXX_RUN_CONFIG=/trixx_run.yml $TEMP_DOCKER_IMAGE bundle exec rake ci_preparation:disable_parallel_query
    - $PODMAN run --rm -v $PWD/trixx_run.yml:/trixx_run.yml -e TRIXX_RUN_CONFIG=/trixx_run.yml $TEMP_DOCKER_IMAGE bundle exec rake ci_preparation:create_user
    - $PODMAN run -d --rm --name=trixx -p8080:8080 -v $PWD/trixx_run.yml:/trixx_run.yml -e TRIXX_RUN_CONFIG=/trixx_run.yml $TEMP_DOCKER_IMAGE
    - sleep 5
    - $PODMAN ps
    - |
      echo "
      MAX_WAIT=60
      typeset -i LOOPS=0
      echo :\$LOOPS:
      while [ \$LOOPS -lt \$MAX_WAIT ]; do
        curl http://localhost:8080/ 2>/dev/null >/dev/null
        retval=\$?
        if [ \$retval -eq 0 ]; then
          break
        fi
        LOOPS=LOOPS+1
        echo -n .
        sleep 1
      done
      if [ \$LOOPS -eq \$MAX_WAIT ]; then
        echo No access to port 8080 after \$MAX_WAIT seconds
        echo retval = \$retval
        exit 1
      else
        exit 0
      fi
      " | bash
    - curl http://localhost:8080/
    - curl -L http://localhost:8080/health_check/
    - |
      echo "
      sleep 3
      curl -L http://localhost:8080/health_check/ | grep health_check_timestamp
      if [ \$? -ne 0 ]; then
        echo healthcheck not complete
        exit 1
      fi
      " | bash
    - $PODMAN stop trixx

cypress_systemtest:
  image: cypress/browsers:node12.14.1-chrome85-ff81
  stage: post_build
  extends: .docker_test
  script:
    # install dependencies
    - cd systemtest
    - npm ci
    # start the server in the background
    - npm run start:ci &
    # run Cypress tests
    - npx cypress run --browser chrome