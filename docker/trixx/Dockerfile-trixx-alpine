# Build Docker image for TriXX application based on jRuby
# Sandro PreuÃŸ, Peter Ramm, 2020-04-01

# Usage:
# Build image:      > docker pull jruby:x.x.x.x
#                   > docker build -f docker/trixx/Dockerfile-trixx --no-cache --build-arg BUILD_VERSION=`date "+%Y-%m-%d_%H-%M-%S"` -t trixx .
# Run container:    > docker run -p 8080:8080 -e DB_PASSWORD=trixx -e DB_USER=trixx -e LOG_LEVEL=debug trixx
# Store image at git.osp-dd.de:5005/main/trixx/trixx for deployment

# STAGE 1: build trixx frontend
FROM node:14-alpine AS frontend_build

ENV FRONTEND_SRC_PATH=frontend

RUN apk update && apk upgrade && \
    npm install -g @vue/cli

WORKDIR /app

COPY $FRONTEND_SRC_PATH/package*.json ./

# npm run install uses latest version of dependencies according to SEMVER behaviour
# RUN npm install
# npm run ci installs exact version according to package-lock.json in contrast to npm install
RUN npm ci

COPY $FRONTEND_SRC_PATH .

# Build VueJS frontend function
RUN npm run build

# Ensure no known vulnerabilities are in dependencies of frontend packages
RUN npm audit --production

# STAGE 2: build trixx backend
FROM openjdk:17-jdk-alpine

MAINTAINER Peter.Ramm@ottogroup.com

ENV BACKEND_SRC_PATH=.
# Default for RAILS_MAX_THREADS to work for every CMD in docker container
ENV RAILS_MAX_THREADS=300
ENV JRUBY_VERSION=9.3.1.0
ENV PATH "$PATH:/opt/jruby-$JRUBY_VERSION/bin"

RUN  echo "### apk update" && \
     apk update && \
     echo "### apk upgrade" && \
     apk upgrade && \
     echo "### apk add missing tools" && \
     apk add curl bash tar wget procps vim tzdata && \
     echo "### get jRuby" && \
     cd /opt && wget -q https://repo1.maven.org/maven2/org/jruby/jruby-dist/$JRUBY_VERSION/jruby-dist-$JRUBY_VERSION-bin.tar.gz && \
     echo "### untar jRuby" && \
     cd /opt && tar -xf jruby-dist-$JRUBY_VERSION-bin.tar.gz && \
     echo "### link ruby to jruby" && \
     ln -s /opt/jruby-$JRUBY_VERSION/bin/jruby /opt/jruby-$JRUBY_VERSION/bin/ruby && \
     echo "### get ruby version info" && \
     ruby -v && \
     echo "### set timezone" && \
     echo 'Europe/Berlin' > /etc/timezone && \
     ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime && \
     date && \
     echo 'due to error building digest-crc:6.0.3 sh: line 0: exec: jrake: not found' && \
     ln -s /opt/jruby-$JRUBY_VERSION/bin/rake /opt/jruby-$JRUBY_VERSION/bin/jrake && \
     echo "### update installed system gems" && \
     gem update --system --no-doc && \
     echo "### remove unnecessary gems" && \
     gem uninstall -x -a ruby-maven ruby-maven-libs && \
     echo "### update system gems to fix trivy findings" && \
     gem update --no-doc rdoc && \
     echo "### install bundler gems" && \
     gem install --no-document bundler && \
     echo "### set .gemrc" && \
     echo "gem: --no-rdoc --no-ri" > ~/.gemrc && \
     echo "### cleanup and list installed gems" && \
     gem cleanup && gem list

WORKDIR /app

COPY ${BACKEND_SRC_PATH}/Gemfile* ./

RUN  bundle config set deployment 'true' && bundle install --jobs 4

COPY ${BACKEND_SRC_PATH} .

# Copy Frontend-Build into Rails-Project for static serve
COPY --from=frontend_build /app/dist public/

# Show doc files for direct access
# nonexistence of trixx.html and trixx.pdf is accepted for build outside CI pipeline
COPY doc/trixx.html doc/trixx.pdf doc/images public/

# use ARG not before this point, because ARGs are implicitly used by RUN commands and
# this will force docker cache misses which results in not using cached layers
ARG BUILD_VERSION
RUN (test -n "$BUILD_VERSION"  && echo $BUILD_VERSION || date "+%Y-%m-%d_%H-%M-%S") > /app/build_version

EXPOSE 8080/tcp

# use bracket syntax to ensure run-kafka-jruby.sh runs with PID 1 and receives SIGTERM signal
CMD ["/app/docker/trixx/run-trixx.sh"]

HEALTHCHECK --interval=5m --timeout=3s CMD curl -I localhost:8080/health_check/ 2>/dev/null | grep "HTTP/1.1 200 OK" >/dev/null || exit 1